apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:support-v13:20.0.0'
    compile 'com.quantimodo.android.sdk:sdk:1.0.1'
    compile 'se.emilsjolander:stickylistheaders:2.5.0'

    // ETL libraries
    compile 'net.sf.opencsv:opencsv:2.3'
}

android {
    compileSdkVersion 19
    buildToolsVersion "20.0.0"

    signingConfigs {
        release {
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        applicationId "com.quantimodo.sync"
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 115
        versionName "1.1.5"
    }
    buildTypes {
        release {
//            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig android.signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}